#!/usr/bin/env perl
use warnings;
use strict;
use File::Temp qw(tempdir);

my(@Options, $verbose, $distant);
setOptions();

@ARGV >= 2 or die "Please provide two or more FASTA contig files.";

my $tool = $distant ? 'promer' : 'nucmer';
my($aligner) = qx(which $tool);
$aligner or die "Can not find '$tool'. Please install the MUMmer package.";
chomp $aligner;
print STDERR "Found $tool: $aligner\n";

my($showsnps) = qx(which show-snps);
$showsnps or die "Can not find 'showsnps'. Please install the MUMmer package.";
chomp $showsnps;
print STDERR "Found show-snps: $showsnps\n";

my $ref = shift @ARGV;
-r $ref or die "Can not read reference genome file: $ref";
print STDERR "Loading reference genome: $ref\n";

my @rest = @ARGV;
printf STDERR "Comparing to %d other genomes.\n", scalar(@rest);

my $dir = tempdir(CLEANUP=>1);
#my $dir = 'tmp'; system("mkdir $dir");
print STDERR "Writing to temporary folder: $dir\n";

my $id = 0;
for my $fname (@rest) {
  -r $fname or die "Can not read file: $fname";
  printf STDERR "[%d/%d]\t$fname\n", $id+1, 0+@rest;

  print STDERR "\tAligning with $tool... ";
  system("$aligner -p '$dir/$id' \Q$ref\E \Q$fname\E 2> /dev/null")==0 
    or die "Error running $aligner [returned $?]";
  my($nblocks) = qx(grep -c '>' '$dir/$id.delta');
  chomp $nblocks;
  print STDERR " found $nblocks blocks.\n";

  print STDERR "\tIdentifying SNPs...";
  system("$showsnps -C -I -r -T '$dir/$id.delta' > '$dir/$id.snps' 2> /dev/null")==0
    or die "Error running $showsnps [returned $?]";
  my($nsnps) = qx(cat '$dir/$id.snps' | wc -l); 
  chomp $nsnps;
  print STDERR " found $nsnps SNPs.\n";
 
  # show-snps output (TSV)
  # [P1]   [SUB] [SUB] [P2]  [BUFF] [DIST] [FRM] [TAGS]
  # 186628 T     A     20975 1      20975   1    1       SeqID1 SeqID2

  $id++;
}

system("ls $dir");
print STDERR "Cleaning up.\n";
print STDERR "Done.\n";

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"verbose!",  VAR=>\$verbose, DEFAULT=>0, DESC=>"Verbose output"},
    {OPT=>"distant!",  VAR=>\$distant, DEFAULT=>0, DESC=>"Genomes are distant: use promer not nucmer"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print "Usage: $0 [options] <reference.fa> <genome1.fa genome2.fa ...>\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
