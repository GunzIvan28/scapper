#!/usr/bin/env perl
use warnings;
use strict;
use File::Temp qw(tempdir);
use Bio::SeqIO;
use Set::IntSpan;

my $GZIP = 'gzip';
my $NUCMER = 'nucmer';
my $SHOWSNPS = 'show-snps';
my $SHOWCOORDS = 'show-coords';
my $TRIMAL = 'trimal';

my $ZCAT = "$GZIP -f -d -c";

my(@Options, $verbose, $format, $missing, $output);
setOptions();

@ARGV >= 2 or die "Please provide two or more FASTA contig files.";

length($missing)==1 or die "--missing must be a single character.";
$output or die "Please specify an --output file prefix";

for my $tool ('grep', $GZIP, $NUCMER, $SHOWSNPS, $SHOWCOORDS, $TRIMAL) {
  my($exe) = qx(which $tool);
  $exe or die "Can not find '$tool'.";
  print STDERR "Found $tool: $exe";
}

my $dir = tempdir(CLEANUP=>1);
#my $dir = 'tmp'; system("mkdir $dir");
print STDERR "Using temporary folder: $dir\n";

my $ref = shift @ARGV;
-r $ref or die "Can not read reference genome file: $ref";
print STDERR "Loading reference genome: $ref\n";
my $refdna;
open my $in_fh, '-|', "$ZCAT \Q$ref\E";
my $in = Bio::SeqIO->new(-fh=>$in_fh, -format=>'fasta');
while (my $seq = $in->next_seq) {
  $refdna .= lc $seq->seq;    # converved in lowercase
}
my $len = length($refdna);
print STDERR "Found $len bp\n";
my @is_snp;

my $ccref = "$dir/ccref.fasta";
print STDERR "Writing concatenated reference: $ccref\n";
my $ccref_out = Bio::SeqIO->new(-file=>">$ccref", -format=>'fasta');
$ccref_out->write_seq( Bio::Seq->new(-seq=>$refdna, -id=>$ref) );

print STDERR "Adding reference to alignment.\n";
my %aln = ($ref => $refdna);

my @rest = @ARGV;
printf STDERR "Comparing to %d other genomes.\n", scalar(@rest);

my $id = 1;
for my $fname (@rest) {
  -r $fname or die "Can not read file: $fname";
  printf STDERR "[%d/%d]\t$fname\n", $id, 0+@rest;

  print STDERR "\tMaking decompressed copy of $fname...\n";
  my $fasta = "$dir/$id.fasta";
  system("$ZCAT \Q$fname\E > \Q$fasta\E");

  print STDERR "\tAligning with $NUCMER ... ";
  system("$NUCMER -p \Q$dir/$id\E \Q$ccref\E \Q$fasta\E 2> /dev/null")==0
    or die "Error running $NUCMER [returned $?]";
  my($nblocks) = qx(grep -c '>' '$dir/$id.delta');
  chomp $nblocks;
  print STDERR " found $nblocks blocks.\n";

  # make a copy of the reference, which we will
  # (1) mutate based on show-snps for our sample relative to reference;
  # (2) mask off regions not in the reference
  # (3) append to the alignment
  my $new = $refdna;  

  # show-snps output (TSV)
  # [P1]   [SUB] [SUB] [P2]  [BUFF] [DIST] [FRM] [TAGS]
  # 186628 T     A     20975 1      20975   1    1       SeqID1 SeqID2
  print STDERR "\tIdentifying SNPs with $SHOWSNPS ...\n";
  system("$SHOWSNPS -C -I -r -T \Q$dir/$id.delta\E > \Q$dir/$id.snps\E 2> /dev/null")==0
    or die "Error running $SHOWSNPS [returned $?]";

  print STDERR "\tParsing SNPs... ";
  my $nsnps = 0;
  open SNPS, "$dir/$id.snps";
  while (<SNPS>) { 
    chomp;
    my @x = split m/\t/;
    next unless @x >= 10 and $x[0] =~ m/^\d+$/;
    my $pos = $x[0];
    substr $new, $pos-1, 1, uc($x[2]);  # replace base
    $is_snp[$pos]++;
    $nsnps++;
  }
  print STDERR " found $nsnps SNPs.\n";

  # show-coords -b -r -T out.delta
  # [S1] [E1] [S2]    [E2]    [LEN 1] [LEN 2] [LEN R] [LEN Q] [TAGS]
  # 1    7974 264074  272049  7974    7976    30660   293440  reference  contig02039
  print STDERR "\tIdentifying unaligned regions with $SHOWCOORDS ...\n";
  system("$SHOWCOORDS -b -r -T \Q$dir/$id.delta\E > \Q$dir/$id.coords\E 2> /dev/null")==0
    or die "Error running $SHOWCOORDS [returned $?]";

  # we start with the empty set, then add alignments in
  my $keep = Set::IntSpan->new();

  print STDERR "\tParsing alignments... ";
  open COORDS, "$dir/$id.coords";
  while (<COORDS>) { 
    chomp;
    my @x = split m/\t/;
    next unless @x >= 8 and $x[0] =~ m/^\d+$/;
    print STDERR "$SHOWCOORDS: @x\n" if $verbose;
    $keep->U(  [ [ $x[0], $x[1] ] ] );  # include aligned region in set
  }
  printf STDERR " aligned %d bp (%.2f%%)\n", $keep->size, $keep->size*100/$len;

  # now modify $new to mask off the unaligned regions
  for my $span ($keep->holes->spans) {
    my $L = $span->[1] - $span->[0] + 1;
    substr $new, $span->[0]-1, $L, ("$missing"x$L) ;
  }

  print STDERR "\tAppending to aligment...\n";
  my $newlen = length($new);
  die "$fname: alignment length $newlen does not equal ref len $len" if $newlen != $len;
  $aln{$fname} = $new;

  $id++;
}

for my $pos (1 .. $len) {
  if ($is_snp[$pos]) {
    print STDERR "SNP @ $pos\n" if $verbose;
  }
}

my $alnfile = "$output.aln";
print STDERR "Writing global alignment: $alnfile\n";
my $out = Bio::SeqIO->new(-file=>">$alnfile", -format=>'fasta');
for my $name (keys %aln) {
  printf STDERR "Wrote %d bp as $name\n", length($aln{$name});
  $out->write_seq( Bio::Seq->new(-id=>$name, -seq=>$aln{$name}) );
}

my $core = "$output.core.aln";
print STDERR "Writing core version: $core\n";
system("trimal -in $alnfile -out $core -st 1 -complementary");

my $nogaps = "$output.nogaps.aln";
print STDERR "Writing gapless version: $nogaps\n";
system("trimal -in $alnfile -out $nogaps -nogaps");

my $nogapscore = "$output.nogaps.core.aln";
print STDERR "Writing core version: $nogapscore\n";
system("trimal -in $nogaps -out $nogapscore -st 1 -complementary");

print STDERR "Cleaning up.\n";
print STDERR "Done.\n";

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             
      DESC=>"This help"},
    {OPT=>"verbose!",  VAR=>\$verbose, DEFAULT=>0, 
      DESC=>"Verbose output"},
    {OPT=>"output=s",  VAR=>\$output, DEFAULT=>'', 
      DESC=>"Output file prefix"},
    {OPT=>"missing=s",  VAR=>\$missing, DEFAULT=>'-', 
      DESC=>"Symbol to use for non-existent bases"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print "Usage: $0 [options] {reference.fa genome1.fa ...} > genomes.aln\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
